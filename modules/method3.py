
import numpy as np
import scipy.optimize as optimize


def perp_error(params, xyz):
    """
    Return the mean of the absolute values for the perpendicular
    distance of the 'xyz' points, to the plane defined by the
    coefficients 'a,b,c,d'.
    """
    a, b, c, d = params
    x, y, z = xyz
    length = np.sqrt(a**2 + b**2 + c**2)
    return (np.abs(a * x + b * y + c * z + d) / length).mean()


def unit_length(params):
    """
    Constrain the vector perpendicular to the plane to be of unit length.
    """
    a, b, c, d = params
    return a**2 + b**2 + c**2 - 1


def m3_min_perp_distance_OLD(x, y, z, N_min):
    """
    Find coefficients of best plane fit to given points. Plane equation is
    in the form:

    a*x + b*y + c*z + d = 0

    and the minimization is done for the perpendicular distances to the plane.

    Source: http://stackoverflow.com/a/35118683/1391441
    """

    # Remove units from the x,y,z coordinates of the points passed.
    # x, y, z = x.value, y.value, z.value

    # Random initial guess for the a,b,c,d plane coefficients.
    initial_guess = np.random.uniform(-10., 10., 4)

    # # Similar as the block below, but using a simpler random sampling
    # # algorithm. In several tests both methods gave the same coefficients,
    # # with this one occasionally failing.
    # # This algorithm is 4-5 times faster than the Basin-Hopping one.
    # # Leave it here to remember I tried.

    # results = []
    # for _ in xrange(50):

    #     # Generate a new random initial guess every 10 runs.
    #     if _ in [10, 20, 30, 40]:
    #         initial_guess = np.random.uniform(-10., 10., 4)

    #     # Constrain the vector perpendicular to the plane be of unit length
    #     cons = ({'type': 'eq', 'fun': unit_length})
    #     sol = optimize.minimize(perp_error, initial_guess, args=[x, y, z],
    #                             constraints=cons)

    #     # Extract minimized coefficients.
    #     abcd = list(sol.x)
    #     # Update initial guess.
    #     initial_guess = abcd
    #     # Save coefficients and the summed abs distance to the plane.
    #     results.append([abcd, perp_error(list(sol.x), [x, y, z])])

    # # Select the coefficients with the minimum value for the summed absolute
    # # distance to plane.
    # abcd = min(results, key=lambda x: x[1])[0]

    # Constrain the vector perpendicular to the plane to be of unit length.
    cons = ({'type': 'eq', 'fun': unit_length})
    min_kwargs = {"constraints": cons, "args": [x, y, z]}

    # Use Basin-Hopping to obtain the best fit coefficients.
    sol = optimize.basinhopping(
        perp_error, initial_guess, minimizer_kwargs=min_kwargs, niter=N_min)
    abcd = list(sol.x)

    return abcd


def m3_min_perp_distance(x, y, z):
    """
    Linear algebra standard fitting module
    (C) 2013 hashnote.net, Alisue
    https://gist.github.com/lambdalisue/7201028

    Find (n - 1) dimensional standard (e.g. line in 2 dimension, plane in 3
    dimension, hyperplane in n dimension) via solving Singular Value
    Decomposition.

    The idea was explained in the following references

    - http://www.caves.org/section/commelect/DUSI/openmag/pdf/SphereFitting.pdf
    - http://www.geometrictools.com/Documentation/LeastSquaresFitting.pdf
    - http://www.ime.unicamp.br/~marianar/MI602/material%20extra/
      svd-regression-analysis.pdf
    - http://www.ling.ohio-state.edu/~kbaker/pubs/
      Singular_Value_Decomposition_Tutorial.pdf

    Example:
        >>> XY = [[0, 1], [3, 3]]
        >>> XY = np.array(XY)
        >>> C, N = standard_fit(XY)
        >>> C
        array([ 1.5,  2. ])
        >>> N
        array([-0.5547002 ,  0.83205029])

    Args:
        X: n x m dimensional matrix which n indicate the number of the
           dimension and m indicate the number of points

    Returns:
        [C, N] where C is a centroid vector and N is a normal vector
    """
    xyz = np.array([x, y, z]).T

    # Find the average of points (centroid) along the columns
    C = np.average(xyz, axis=0)

    # Create CX vector (centroid to point) matrix
    CX = xyz - C
    # Singular value decomposition
    U, S, V = np.linalg.svd(CX)
    # The last row of V matrix indicate the eigenvectors of
    # smallest eigenvalues (singular values).
    N = V[-1]

    x0, y0, z0 = C
    a, b, c = N
    d = -(a * x0 + b * y0 + c * z0)

    return (a, b, c, d)


if __name__ == '__main__':

    # seed = np.random.randint(100000)
    # print("Seed:", seed)
    # np.random.seed(seed)
    # a, b, c, d = np.random.uniform(-10., 10., 4)
    # print("Real abc(d=1): {:.3f} {:.3f} {:.3f}\n".format(a / d, b / d, c / d))

    # N = 200
    # x, y = np.random.uniform(-5., 5., (2, N))
    # z = -(a * x + b * y + d) / c
    # z = z + np.random.uniform(-.2, .2, N)

    # # SMC
    # x = [-0.7895454727463541, 0.3142635180353537, 0.7400563040676559, -1.269195689229863, -0.6167589969630166, -0.5947864710796732, -0.3842593776134199, -0.12028624240613879, 5.224958548396743, -0.6767717808427199, 0.5621790218473932, -0.969179959908617, -0.4180818065308402, -1.169082874002459, -2.36756920300703, 1.0959622966737508, -2.0359596164235736, -1.8023953183296586, -0.05359194477436314, -2.973194173115393, 0.5053962982858653, -2.7297116125167045, -3.0250041338547544, -1.3131741446170133, -4.202305873676934, 2.521935802661258, -2.0308936064409693, -3.7305849508588707, 0.41878600090029783, -0.6159206329689596, -2.901342031050228, 0.5304133634272705, -4.6421894879434635, -1.3823106375809535, 1.9942168667683646, -0.39302021247533664, -3.115086899221274, -0.37089153473870023, -0.027559983580624347, -4.35868194642209, 0.6461431584197946, 0.013903328065091767, 0.8268716274423277, -0.20588165059341937, -0.8639627573898336, -0.36477997425530106, 2.173558327180059, -2.1545958964965144, -1.6047945783286297, -4.370608161712967, 2.3601503065926286, 0.9104757511319476, -3.299277506486889, 2.2495213791039537, -1.2147190270706874, -0.6668714664176891, -4.151686853345058, 0.395685997283502, -0.8109385178684301, 0.26439808355191946, -1.4272679031545472, -0.67113911398881, -0.7951873530018394, 0.50581366434731, -0.3642492878319409, -0.6020212425367143, -1.1936165726353805, -0.2666771157742035, -1.1369864339090519, -1.0663352455865327, -0.12542323331539693, 0.1804006072839169, -0.3961367853065343, -0.6496261552719008, -1.2793311597498962, 0.2668286040739405, -0.6602939613497758, 0.6829534336809064, 0.3101637979569213, 0.4250097522172797, -0.9589567484930367, 0.4666444611880016, 0.6956630886838564, 0.3408093977505148, 0.3955401689993674, 0.35046983412022686, -0.850427927926822, -1.269198230503741, -0.6095053282113737]
    # y = [0.860354577738631, -0.5011799286475163, -0.1799847503513502, -0.4934373353259233, 0.47245941336493125, 0.48800368207936334, 1.000225526996434, 0.6171740802558895, -0.8310731321195917, 1.6781439281003339, -0.7142959832791163, -0.04517092805790653, -0.13342569074323482, -0.6512296324090759, -3.546998505159068, -1.1698319282966114, 1.7366518858234845, 1.9592579174137692, 0.6647979378366472, -3.163235696968614, 0.8289587955122065, -3.0827025745917322, -1.7299104323347168, -0.4443777185489849, 1.355446354902689, -1.8064242197344471, 0.745635977826821, -1.88174882906371, -0.6932633760232992, -1.344323959120853, 1.6499932467196106, -0.7474049110381695, -2.1266938892273326, -2.7121199456364486, -2.4436775908382007, -0.6512276675983147, 0.6601748908455225, -1.6382817937996863, -0.6075216707384451, 1.252613271931339, -0.20504655905756367, 0.6934560727038452, 0.2548627297121523, -1.3240518998543749, -0.017424331499163486, -1.8141182893703174, -1.1567266925142865, -2.5497442129276022, -0.38755135002823976, -1.5192777225551832, -1.1488168281364914, -0.08943720546130997, -0.33700362503071135, -1.0486948515571888, -0.09839606936955643, 1.4541576610012499, -2.1520370977923218, -0.7395774877001706, -1.9546386150524333, -0.6405549833264944, -0.014399279256918258, -0.37717215805323595, 1.9037600860562334, -0.6033254663856797, -0.11711422784028624, -0.5522576427390671, -0.49737067143811964, -1.4908620537605906, -0.34399119680505974, -0.45503532494316634, -1.4140078475466968, -0.5883648555184005, 1.7724018327128122, -0.44067678504802293, -0.3221303568262979, -0.5890229808658082, 0.623070047672382, -0.6490100503951424, -0.6199303730353573, -0.5775700523996605, -0.25397699448907707, -0.6727632123877092, -0.6687340728860095, -0.6529149729431849, -0.6602798627899292, -0.688573124953268, 0.5760182195843031, -0.4517758632482566, 0.3908069792059869]
    # z = [1.14181967449138, 2.243509592893581, -2.3201511596250057, -0.5583294033940405, 2.2456341209589965, 0.004778028074589713, 0.5772607297562686, 1.6914297657258572, -2.7032080550042608, -1.1256754192370835, 0.006669790910642348, -2.9120790410004886, -2.323165852016338, -2.310730170905906, 2.393081051908318, 1.7094753796007538, -1.6791921800273713, -0.5164531482551808, 1.6918401702052037, -1.0021057371974251, -0.5656226134880598, 2.3827361869007575, -1.055324755011604, 2.2566763653380306, 0.726941774837158, -0.49614897217325193, 2.8275178865620347, -1.5982178491466073, 1.1360011239107308, 0.5857223862793148, -2.2379363722594903, -0.5664436456020923, 0.21081256254875314, -2.2525329231365347, 2.872090365854582, -0.5685343782760341, 2.3255555545635573, -0.5505917087960128, -1.1486960708747773, -0.9884322250856101, -2.3210889428816515, -0.5693141175753453, -2.9135644528938585, 0.5825357452833941, 1.6943455791234356, -1.1244870219094594, -1.6878261580608083, -1.6478878648156652, -1.1300246214873795, -1.5671114538749933, 0.05564036436889097, -0.5664675402038881, 0.08884377519783726, 0.04974308250564263, 1.142819908635751, 0.588759755560325, 0.17676429523071846, -2.91391236323431, 0.03615792503107684, -2.320928109431314, 0.5845060680300804, -2.9147669606418916, 1.1656148280219085, 1.6932925868857893, -0.5719909361464133, 2.2461685467559107, 0.5815302171845218, -2.306816482208383, 1.1422100890260793, 2.2518365987949736, 2.2574575339859777, 1.6912915559013513, 0.5947826765946047, 2.2457396565221757, 0.014050195096139362, 0.003375276400419125, -1.728972754581271, 2.248013038907949, 1.69213631625545, 1.6924160190062594, 0.5759244852041121, -2.3194486692756655, 0.575493074517901, 1.6926502747321734, 2.2455404164997503, 2.2455784453185785, 0.5765023304416061, 0.014651758867785247, 0.004231594962000429]
    # LMC
    x = [1.172454688861974, 2.0029440384650266, -0.8786318002629884, 0.4278939604476866, 1.366142552239391, -2.1595534004958252, 2.1104543583421824, 1.1974640975488153, 0.4449279784096213, -2.0810094204613883, 1.1655230345323428, 0.9095220815646303, 1.295162472073404, 0.9754556347900476, 2.0281659385341415, -1.9843445683966199, 1.085217504466161, -0.9798333763087911, 2.5033961310438935, 0.8412339366321684, -1.8572657770961603, 2.697912860336908, 1.898614831265683, 0.8105266840105404, -2.046608317423991, 2.7004384738091667, 2.5373220833895958, 0.4202531018965609, 1.0425582222015621, 1.8492329386186088, -1.968528255460758, 2.179888119049202, 2.097212096433736, -4.010838717141157, 1.1558287640923743, -2.9571643443494184, 1.8592900784672228, -3.4841441062853975, 2.552442911549671, 2.226727943704956, 2.121475801648159, 0.14882165323221327, 1.2042041122972462, -0.9180777088524406, 1.910565457289273, 1.0660312416713629, 0.6510907585984057, 2.0967121651037783, 1.1484000297406884, -1.7670514601174012, -0.38814151285111653, 1.582575874248833, 2.5868812934092906, 0.22496107685889474, -0.9219833295467568, 1.5669967464133447, -0.5687200031024645, -3.7708737466394786, 0.2608611114576193, 4.349081834243984, 0.8202509555092609, -1.5947972211483232, 0.9736103155154402, 1.2838541958377978, 3.7985716232358335, 1.1756971917647483, 1.7834118390670566, 1.1281441478051075, -2.0118889302444223, -0.5995803308260129, 0.32077033535758387, 0.8135719933919375, 0.62611590692268, 1.3018663649639268, -0.7271525496448139, 1.9172742234770503, -0.7108415762295921, 1.9685465426463893, -3.149252408708922, -4.060043111069052, -3.3752702254626876, -1.985513592149218, 2.033073141978059, -1.0379089220142337, 0.05957919858066696, 2.178529339038269, 2.109627838153939, 2.8987724263786174, 0.9562077676739172, 0.7875183148377223, 0.755740714419255, -0.26825101547716784, 1.6690385240311976, -0.28877792354152826, 0.33435105973077617, -0.29757422904703273, 2.7581055173612485, -3.4344275379938582, -2.9394415977352426, 2.0038460696079072, 2.206216953155886, -1.0352084682216665, -2.0039938640838546, -3.9104727661311927, 1.7290487193592832, 1.119824454530669, 0.3223953336589149, 0.3664939398181304, 0.7162932427002716, -0.6510949979016749, 0.9704682238065936, -0.958514132451871, 0.9615111008586893, -1.0667872216681578, 1.8021244106929306, -0.060098920604777104, 0.17216906813517455, -1.5964760388423855, 2.2330932220400928, 1.9257633093026034, 1.1162938734593462, 1.1781306304861199, -1.8600651472632799, -1.4399431700253835, 0.8452183803960911, 1.7661749989635622, 0.8354709235600951, 1.8300570221957697, -0.6207664783599607, -1.623900600638106, 0.8919581570537721, 0.367910883055526, 0.07364876391208565, 2.1611405318765424, -2.041641635342874, -2.052539658575788, -0.9644116757922658, -1.8689820843176945, -0.15613351765712755, -0.910841526947147, 0.9469917714548155, -0.8929399989509903, 1.2023125342007481, 1.165153504706883, -1.092940757226289, -0.7645284090204343, -1.5594385646587459, -0.5973498196130741, 1.2325774703427166, 1.1772401240024297]
    y = [0.6703791135302666, 1.2163076403114967, 1.2618539872308647, 0.6732584573324129, 1.0959456367349345, -2.2582441035212923, -2.371156077092634, 1.2100068141319829, 0.5109868642249316, -2.113279589313335, 2.377730400244039, 0.8497806408141393, 1.2231899028904742, 1.1844143994352991, 1.3370146330501662, -0.01224740217815524, 1.8083916603966037, 1.1032503818822825, 1.562835419175017, 1.6169587554546394, 0.043103553151167394, 1.7098717036348248, -2.941179497377513, 0.8910741162770144, 0.14841369252554623, 1.3616954868183642, 1.7067484497820686, 0.2576291394906469, 1.2902156453412998, 1.3697452088104292, -0.053725287154485026, 1.2454661606155233, -2.927173814060146, -0.9555959459737479, 0.8433042136010673, -2.847346163311212, 1.3952561066827047, -3.0501496018334135, 0.627237643172674, -3.856167458624678, -0.20203416627121662, 0.41278832273061283, 1.2013226391814258, 1.1176994160077123, 1.185785262576426, 1.3594393638363649, 0.5839515199400466, 3.512149663835364, 0.9325681364588628, 0.17479726840521465, -1.368378723943971, -0.34854211055649015, -4.371974479455018, 0.2691705320384706, 5.310362289498468, -0.1352781789156449, -1.9823395333339708, -3.28633088453516, 0.9106372635018665, 1.7969605234393036, 1.617807445733975, 0.18933818654144913, 1.4905334895305609, 2.0842224244663274, 2.5292902541027873, 0.7006364697758448, 1.293729678207376, 0.8964139443829278, 2.7916846393382686, -2.243494993985927, -0.9584487206024673, 1.5540883407880133, 2.512984948662696, 0.9251417601494241, -2.3705643250725696, -2.868059217156779, -2.278394343414466, -2.8305910089560813, -2.850309802432168, -0.9789147924727469, 5.758799807224104, 2.7466682542956433, 1.5208650449405876, -4.733639616409461, 0.5065468888352047, -2.67576518670957, -0.41668256759260386, 1.976233752005251, 1.4639884373434497, 1.6888070662598824, -0.8989369888395369, -3.449672809619393, -0.49893224977189415, 1.5139628395398261, 0.7256766318753116, 1.5866751937475523, -3.9735852180262063, -3.0899331758623747, -2.6122275578058747, 1.5155126385973958, 1.4688891051728254, 4.466643648736634, 0.2489441217900621, -0.7068970277537047, 1.2850859351883281, 1.7335817969869658, 0.28961680736245426, 0.2824428610680758, 0.6257484199217245, -1.3933343864860408, 1.5321191441481479, 1.3494884329870191, 2.453566884322965, 0.958591474049242, 1.1320598433422078, 0.4683959986625948, 0.33837718697823016, 0.29775223476609586, -2.8349614127402085, -2.5325763598899247, 0.8269843475909595, 0.6791737039057895, 0.07872787515267098, 0.13431327309362412, 0.6397004792582355, -0.3765184716656759, 1.721910415289422, -0.2859232340835815, -0.9919105375306723, 0.41366361328820356, 2.2004172385779133, 0.36096348394266903, 0.19675260583591497, -2.8423738203585254, -4.405162550439423, 3.675824847884292, -4.666760970626872, 0.021432805833794213, -1.0964152703957428, 1.2388514347227155, 1.2276340276675004, 1.2806485400908787, 2.347728760286484, 1.3836371789057382, 1.388707873801078, 1.4237410113725895, 0.14554153560152513, -1.280036617624346, 0.8080405361943954, 0.9016310093003698]
    z = [1.6014525241640456, -1.108240959329656, 1.1598532675825481, 1.1421266649135902, -1.604639330592363, -1.066337218402765, 0.3307758941231427, 0.713953222599855, 0.23383900276620295, -1.0758230448155857, -1.5663228128665878, 1.5986081506269798, 1.6154291293104706, 0.2529273317023808, 1.1961575550779102, -2.073273615212578, 0.2740218138581838, 1.1579341604313669, -0.6078525063607714, -0.6611670463335955, -2.07795453559779, -0.5930675927616846, 1.709586294011821, 1.5975894070453833, -1.1207947081985736, 1.2294957766324899, 0.3234576372694207, -2.589982231830156, 1.1638276333981494, -1.1101559957029608, 0.2682779750806077, -1.5732113885759702, -0.5656813306387036, 1.7588521192463915, 1.15659895044854, 1.3087401683278301, 0.2836542394695982, -0.4816139317314807, 0.2988233657201249, 1.3393813829647243, -1.5903243997743317, 0.2311552721267205, -0.20140200125200636, -2.572361242733649, -1.585323360966143, 0.7148323572911224, 1.590486638605448, 0.8548108066058617, 0.25125672956151845, 0.2609733690831746, -2.091694096652752, 0.2556641250093534, -2.3458559556312437, -0.6928010076795346, 1.4344469946577263, 1.6081806927680304, -2.5517609300749484, 1.392873410418865, -2.1025221562977947, -0.9447094292995999, -0.661484729169274, -0.20453683465790107, -2.080664744407308, -0.1704582216780608, -0.02207094617625671, 0.2480802755229945, -0.18182324488763157, 1.6040641573674037, -0.5768332477862614, 0.28354404018408985, -1.624501513302235, -0.19956720143058249, -0.6276751395914033, 0.7104221139006981, -0.6332056296809654, -1.9965843559225362, -0.6376782614693681, -0.11154135958819467, -0.04995706361577135, -0.05596242556958231, 2.045979767420789, -0.5803479127451041, -0.16592183863437526, 0.004565250816625621, -0.6914459501540549, -2.47874512499709, -2.548223053041582, 1.2619960149784575, -0.1997618036875366, -1.1280318812985115, -0.21651308186821439, 1.7066486428473553, -0.6640117670251087, 0.2531401334246297, -2.586214722505055, -0.6682501010694963, 0.003682474324925522, 0.4445779662035889, 1.2944549102952365, -1.5731231727335455, -1.5661966567984607, 0.8985877064074472, -1.1220951191237916, 1.2978242803454236, -0.1839525962037527, -0.1877643581640953, -1.1602117002106027, -0.6919011453148443, 1.144878405593083, -2.0884024350774126, -0.1974498070276951, 1.6109364456751578, -1.093989955437749, 1.6038639420435956, 1.182072625986244, 2.027769205527143, 1.1370780440794235, 1.1626558382507923, 0.36052101139571846, -1.5360887301240496, -2.5739062165345032, 1.6017135739227157, 1.6184578422251974, 2.047293070374579, -2.1003457514203348, -2.079784087359414, 0.2661115369180962, 1.618093438828133, -1.1486388713754536, 0.2574990624757092, -0.17400231396808863, -2.589766260642911, -2.11072652034818, 0.357754021404709, 0.0054589213462818975, -2.423157002396813, -0.003210713994867831, 0.2644043336633075, 1.5952653951336018, 1.1598544561967756, 2.050558177470876, -0.20595242802844638, -1.5668539565752155, 0.2621724127725642, -0.19910861560331483, -1.6090659495632451, 1.1607640518834614, 1.6032259368274069, 0.2510922440094703, -1.1405108476688213]
    x, y, z = np.asarray(x), np.asarray(y), np.asarray(z)

    from best_fit_angles import angle_betw_planes

    a, b, c, d = standard_fit(np.array([x, y, z]).T)
    print("SVD  abc(d=1): {:.3f} {:.3f} {:.3f}".format(a / d, b / d, c / d))
    print("Perp err: {:.5f}".format(perp_error((a, b, c, d), (x, y, z))))
    print("(i, theta): {}, {}".format(*angle_betw_planes([a, b, c, d])))

    # a, b, c, d = m3_min_perp_distance_Z(x, y, z)
    # print("Z    abc(d=1): {:.3f} {:.3f} {:.3f}".format(a / d, b / d, c / d))
    # print("Perp err: {:.5f}".format(perp_error((a, b, c, d), (x, y, z))))

    abcd = m3_min_perp_distance(x, y, z, 1000)
    a, b, c, d = abcd
    print("BH   abc(d=1): {:.3f} {:.3f} {:.3f}".format(a / d, b / d, c / d))
    print("Perp err: {:.5f}".format(perp_error(abcd, (x, y, z))))
    print("(i, theta): {}, {}".format(*angle_betw_planes([a, b, c, d])))
